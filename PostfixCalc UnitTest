using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;

namespace PostfixCalculator_UnitTest
{
	[TestClass]
	public class UnitTest1
	{
		const string syntaxExc = "Invalid syntax";
		const string lnExc = "Ln() cannot be ≤ 0";
		const string logExc = "Log() cannot be ≤ 0";
		const string sqrtExc = "Sqrt() cannot be < 0";
		const string cotgExc = "Cotg() cannot be zero";
		const string divZeroExc = "Cannot divide by zero";
		const string moduloExc = "Cannot modulo by zero";
		double tolerance = 0.0000000000000100;

		private Dictionary<string, object> addition = new Dictionary<string, object>()
		{
			{"3+4", 7 },
			{"3.+4", 7},
			{"3.+4.", 7 },
			{"+3+4.", syntaxExc },
			{"3+4+5", 12 },
			{"3.1+4.2", 7.3 },
			{"3.1+4.2+5.3", 12.6 },
			{"-3.1+4.2+5.3", 6.4 }
		};

		private Dictionary<string, object> substitution = new Dictionary<string, object>()
		{
			{"3-4", -1 },
			{"3.-4", -1},
			{"3.-4.", -1 },
			{"+3-4.", syntaxExc },
			{"-3-4.", -7 },
			{"3-4-5", -6 },
			{"3.1-4.2", -1.1 },
			{"3.1-4.2-5.3", -6.4 },
			{"-3.1-4.2-5.3", -12.6 }
		};

		private Dictionary<string, object> multiplication = new Dictionary<string, object>()
		{
			{"3*4", 12 },
			{"3.*4", 12},
			{"3.*4.", 12 },
			{"+3*4.", syntaxExc },
			{"*3*4.", syntaxExc },
			{"-3*4.", -12 },
			{"3*4*5", 60 },
			{"3.1*4.2", 13.02 },
			{"3.1-4.2*5.3", -19.16 },
			{"-3.1-4.2*5.3", -25.36 }
		};

		private Dictionary<string, object> division = new Dictionary<string, object>()
		{
			{"3/4", 0.75 },
			{"3./4", 0.75},
			{"-3./4.", -0.75 },
			{"+3/4.", syntaxExc },
			{"*3/4.", syntaxExc },
			{"3/0", divZeroExc },
			{"3/4/5", 0.15 },
			{"3.5/1.75", 2 },
			{"3.1-3.5/1.75", 1.1 },
			{"-3.1-3.5/1.75", -5.1 }
		};

		private Dictionary<string, object> brackeys = new Dictionary<string, object>()
		{
			{"(3/4)", 0.75 },
			{"3./(4)", 0.75},
			{"(-3.)/4.", -0.75 },
			{"-(3./4)", -0.75 },
			{"-(-3./4)", 0.75 },
			{"3(4.", syntaxExc },
			{")3/4.", 0.75 },
			{"3/()", syntaxExc },
			{"(3+4)/5", 1.4 }
		};

		private Dictionary<string, object> funcs = new Dictionary<string, object>()
		{
			{"9%5", 4 },
			{"9%0", moduloExc },
			{"pow(89)", 7921 },
			{"pow(-9)", 81 },
			{"-(pow(-9))", -81 },
			{"sqrt(9", syntaxExc },
			{"sqrt(9)", 3 },
			{"sqrt(-9)", sqrtExc },
			{"sqrt(0)", 0 },
			{"log(100)", 2 },
			{"log(0)", logExc },
			{"log(-5)", logExc },
			{"ln(e)", 1 },
			{"ln(0)", lnExc },
			{"ln(-5)", lnExc },
			{"abs(9)", 9 },
			{"abs(-9)", 9 },
			{"sin(π/2)", 1 },
			{"cos(π)", -1 },
			{"tg(0)", 0 },
			{"cotg(0)", cotgExc },
			{"sin(π)+cos(0)*abs(9)", 9 },
		};

		[TestMethod]
		public void TestAddition()
		{
			Calculate(addition);
		}

		[TestMethod]
		public void TestSubstitution()
		{
			Calculate(substitution);
		}

		[TestMethod]
		public void TestMultiplication()
		{
			Calculate(multiplication);
		}

		[TestMethod]
		public void TestDivision()
		{
			Calculate(division);
		}

		[TestMethod]
		public void TestBrackeys()
		{
			Calculate(brackeys);
		}

		[TestMethod]
		public void TestFuncs()
		{
			Calculate(funcs);
		}

		private void Calculate(Dictionary<string, object> tests)
		{
			foreach (var item in tests)
			{
				if (double.TryParse(item.Value.ToString(), out var d))
				{
					Assert.AreEqual(d, new PostfixCalculator.PostfixCalculator().CalculatePostfix(new PostfixCalculator.PostfixCalculator().InfixToPostfix(new StringBuilder(item.Key))), tolerance);
				}
				else
				{
					Assert.AreEqual(Assert.ThrowsException<Exception>(() => new PostfixCalculator.PostfixCalculator().CalculatePostfix(new PostfixCalculator.PostfixCalculator().InfixToPostfix(new StringBuilder(item.Key)))).Message, item.Value.ToString());
				}
			}
		}
	}
}
